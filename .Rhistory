library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
output$coordinates <- renderText({
points
})
return(points)
}, ignoreNULL = FALSE)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(leafletOutput("mymap"), p(), actionButton("recalc", "New points"), p(), ("coordinates"))
ui <- fluidPage(leafletoutput("mymap"), p(), actionButton("recalc", "New points"), p(), ("coordinates"))
ui <- fluidPage(leafletOutput("mymap"), p(), actionButton("recalc", "New points"), p(), ("coordinates"))
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
install.packages(c("backports", "BH", "bit", "bit64", "callr", "car", "carData", "cli", "clipr", "colorspace", "coronavirus", "covr", "crosstalk", "data.table", "DBI", "devtools", "diffobj", "digest", "dplyr", "DT", "e1071", "ellipsis", "fansi", "flexmix", "forcats", "Formula", "freetypeharfbuzz", "fs", "gdtools", "generics", "ggplot2", "gh", "git2r", "glue", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "inline", "isoband", "jsonlite", "knitr", "labeling", "later", "lme4", "lmtest", "lubridate", "magrittr", "maptools", "MASS", "maxLik", "multcomp", "mvtnorm", "nanotime", "nloptr", "openssl", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgconfig", "pkgKitten", "pkgload", "plyr", "prettyunits", "processx", "profvis", "promises", "ps", "purrr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "Rcpp", "RcppCCTZ", "RcppEigen", "readr", "remotes", "reshape2", "rex", "rgeos", "rJava", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstudioapi", "rversions", "sampleSelection", "sandwich", "scales", "sf", "shiny", "sp", "statmod", "stringi", "survival", "svglite", "sys", "systemfonts", "testthat", "tibble", "tidyselect", "tinytest", "tinytex", "units", "usethis", "vctrs", "vdiffr", "VGAM", "withr", "xfun", "xlsx", "xml2", "xts", "zip", "zoo"))
StartDate <- as.Date("2020/2/28")
StopDate <- as.Data("2020/3/1")
StopDate <- as.Date("2020/3/1")
StopDate - StartDate
_varA
.2Var_A
Var2_A
MyData <- c(10, 9, 8, 7)
MyData[c(2,4)]
mydata <- read.csv(inputs.csv)
mydata <- read.csv[inputs.csv]
myvect <- c(1,2,3)
as.character(myvect)
help
help(stargazer)
install.packages("stargazer")
stargazer(summary)
clear
quit()
library(dplyr)
library(Rcpp)
remove.packages("Rcpp", lib="~/R/win-library/4.1")
remove.packages("dplyr", lib="~/R/win-library/4.1")
remove.packages("dbplyr", lib="~/R/win-library/4.1")
remove.packages("dtplyr", lib="~/R/win-library/4.1")
getwd()
setwd("A:/Göttingen/Quasi/HW1")
install.packages(tidyverse)
install.packages("tidyverse")
$ export LANG=en_US.UTF-8
export LANG=en_US.UTF-8
export LANG=en_US.UTF-8
defaults write org.R-project.R force.LANG en_US.UTF-8
getwd()
setwd("A:/Göttingen/Quasi/HW1")
library(tidyverse)
installed.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
did_data <- read_dta("did_dataset.dta")
installed.packages("haven")
install.packages("haven")
knitr::opts_chunk$set
#load packages
require(tidyverse)
require(haven)
#set working directory and read data
setwd("A:/Göttingen/Quasi/HW1")
did_data <- read_dta("did_dataset.dta")
View(did_data)
View(did_data)
knitr::opts_chunk$set
#load packages
require(tidyverse)
require(haven)
#set working directory and read data
setwd("A:/Göttingen/Quasi/HW1")
did_data <- read_dta("did_dataset.dta")
View(did_data)
#Simple post treatment comparison between treated and untreated
#subset data to wave 2 survey
wave2 <- filter(did_data, wave==2)
wave2_treat <- filter(wave2, treat==1)
wave2_control <- filter(wave2, treat==0)
mean_post <- mean(wave2_treat$savings_account) - mean(wave2_control$savings_account)
mean_post
require(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
#load packages
library(tidyverse)
library(haven)
#set working directory and read data
setwd("A:/Göttingen/Quasi/HW1")
did_data <- read_dta("did_dataset.dta")
#Check the dataset
View(did_data)
#Simple OLS Regression
reg1 <- lm(savings_account ~ treat, wave2)
summary(reg1)
According to the first assumption, there should be a random selection of population into the treatment group.
date: `r format(Sys.time(), '%d %B %Y')`"
tags: [nothing, nothingness]
exit()
quit()
quit
?pandas
install.packages("pandas")
pip install virtualenv
rm(list=ls())
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(foreign)
library(dplyr)
library(ggplot2)
setwd("A:/Göttingen/Lecture_Development_Economics_I_-_Vorlesung_M.WIWI-VWL.0008/PS4")
getwd()
setwd("A:/Göttingen/Dev_Econ_I/PS4")
setwd("A:/Göttingen/WiSe_2021/Dev_Econ_I/PS4")
mpd <- read_dta("mpd2020.dta")
new_mpd <- mpd[mpd$country == "Belgium" | mpd$country == "Egypt"  | mpd$country == "Iraq",]
new_mpd
ggplot(new_mpd, aes(x = year, y = gdppc, col = country)) + stat_summary(geom = 'line')
ggplot(new_mpd, aes(x = year, y = gdppc, col = country, linetype = 5 )) + stat_summary(geom = 'line') + ggtitle("GDP per capita over time")
ggplot(new_mpd, aes(x = year, y = gdppc, col = country )) + stat_summary(geom = 'line') + ggtitle("GDP per capita over time")
mpd_France <- mpd[mpd$country == "France"]
mpd_France <- mpd[mpd$country == "France",]
mpd_France
mpd_France %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagY, -lagD, -t)
mpd_France %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagD, -t)
mpd_France %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
mpd_France_1280 <- mpd[mpd$country == "France", mpd$year <= "1280",]
mpd_France_1280 <- mpd[mpd$country == "France", mpd$year <= 1280,]
mpd_France_1280 <- mpd[mpd$country == "France", mpd$year =< 1280,]
mpd_France_1280 <- mpd[mpd$country == "France", mpd$year <= 1280,]
mpd_France_1280 <- mpd[mpd$country == "France", mpd$year < 1281,]
mpd_France_1280 <- mpd[mpd$country == "France", mpd$year < "1281",]
mpd_France_1280 <- mpd[mpd$country == "France" | mpd$year < "1281",]
mpd_France_1280
mpd_France_1280 <- mpd[mpd$country == "France",]
mpd_France_1280
mpd_France_1280
#aonther round of subsetting for year until 1280
france_1280 <- mpd_France_1280[mpd_France_1280$year == "1", "1000", "1280"]
#aonther round of subsetting for year until 1280
france_1280 <- mpd_France_1280[mpd_France_1280$year <= "1280"]
#aonther round of subsetting for year until 1280
france_1280 <- mpd_France_1280[mpd_France_1280$year < 1280,]
#aonther round of subsetting for year until 1280
france_1280 <- mpd_France_1280[mpd_France_1280$year < 1281,]
france_1280
france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
#aonther round of subsetting for year until 1280
france_1280 <- mpd_France_1280[1280 <= mpd_France_1280$year <= 2019,]
# Subsetting data limited to only France
France <- mpd[mpd$country == "France",]
#aonther round of subsetting for year until 1280
france_1280 <- France[France$year < 1281,]
france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
#aonther round of subsetting for year until 1280
france_2018 <- France[France$year > 1280 & France$year < 2019]
#aonther round of subsetting for year until 1280
france_2018 <- France[France$year > 1280 & France$year < 2019,]
france_2018
france_2018 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
#calculating the compound annual real GDP per capita growth (1 to 1280)
france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
#calculating the compound annual real GDP per capita growth (1 to 1280)
cagr_f = france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
#calculating the compound annual real GDP per capita growth (1 to 1280)
cagr_f = france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
cagr_f
#calculating the compound annual real GDP per capita growth (1 to 1280)
cagr_f = france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
cagr_f
c_growth = mean(cagr_f$CAGR, na.rm = TRUE)
#calculating the compound annual real GDP per capita growth (1 to 1280)
cagr_f = france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
cagr_f
c_growth = mean(cagr_f$CAGR, na.rm = TRUE)
c_growth
#calculating the compound annual real GDP per capita growth (1 to 1280)
cagr_f = france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
cagr_f
c_growth = mean(cagr_f$CAGR, na.rm = TRUE)
c_growth
cagr_f_2 = france_2018 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
f_growth = mean(cagr_f_2$CAGR, na.rm = TRUE)
f_growth
cagr_f_2
cagr_f = france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
cagr_f
cagr_f_2 = france_2018 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
f_growth = mean(cagr_f_2$CAGR, na.omit = TRUE)
f_growth
cagr_f_2 = france_2018 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
f_growth = mean(cagr_f_2$CAGR, na.rm = TRUE)
f_growth
f_growth
cagr_f_2 = france_2018 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
cagr_f_2
#now the average
f_growth = mean(cagr_f_2$CAGR, na.rm = TRUE)
f_growth
cagr_f_2 = france_2018 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
#now the average
f_growth = mean(cagr_f_2$CAGR, na.rm = TRUE)
f_growth
#calculating the compound annual real GDP per capita growth (1 to 1280)
cagr_f = france_1280 %>%
mutate(lagy = lag(year), lagG = lag(gdppc), t = year - lagy, CAGR = (gdppc/lagG)^(1/t) -1)%>%
select(-lagy, -lagG, -t)
cagr_f
c_growth = mean(cagr_f$CAGR, na.rm = TRUE)
c_growth
library(tinytex)
France
France[France$year == 2018]
France[France$year == 2018,]
f_growth
knit_with_parameters("A:/Göttingen/WiSe_2021/Dev_Econ_I/PS4/PS4_i_tried.Rmd", encoding = "UTF-8")
remotes::install_github("rstudio/reticulate")
library(reticulate)
install_minicond
remotes::install_github("rstudio/reticulate")
library(reticulate)
install_miniconda
remotes::install_github("rstudio/reticulate")
install.packages("remotes")
remotes::install_github("rstudio/reticulate")
library(reticulate)
install_miniconda
install_miniconda()
install.packages("pandas")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("A:/Göttingen/SoSe_2022/Econometrics II/R Sessions")
random_walks <- function(N=25, Rep=1000, verbose=TRUE){
# create an empty vector for the results
results <- rep(0, times=Rep)
# loop: Rep times (from 1 to Rep)
for(i in 1:Rep){
# create a normally distributed random vector x with N entries
x <- cumsum(rnorm(N))
# create a normally distributed random vector y with N entries
y <- cumsum(rnorm(N))
# run regression, and write the 4th entry (p-value) of the 2nd estimator (b2) into vector results
results[i] <- summary(lm(y ~ x))$coefficients[2, 4]
}
print(paste0("1% level: ", sum(results < 0.01) / Rep)) # print share of runs whose p < 0.01
print(paste0("5% level: ", sum(results < 0.05) / Rep))  # print share of runs whose p < 0.05
print(paste0("10% level: ", sum(results < 0.1) / Rep)) # print share of runs whose p < 0.1
if(verbose){
plot(x = 1:N,
y = x,
xlab = "t",
ylim = c(min(x,y), max(x,y)),
ylab = "",
type = "l")
lines(x = 1:N,
y = y,
col = "red")
legend("topleft",
legend = c("x", "y"),
col = c("black", "red"),
pch = "l")
}
return(results)
}
set.seed(1234)
p_25obs <- random_walks()
# T = 100
set.seed(1234)
p_100obs <- random_walks(N=100)
# T = 500
set.seed(1234)
p_500obs <- random_walks(N=500)
punjab
rm(list = ls())
getwd()
setwd("A:/Datasets/Data Cleaning")
library(tidyverse)
library(mice)
set.seed(5)
punjab_data2 <- read_csv("gdp_Punjab2.csv")
austin_pet <- read_csv("aac_shelter_outcomes.csv")
# Play with punjab dataset
View(punjab_data2) # Bunch of missing values for this one
str(punjab_data2)
head(punjab_data2)
View(austin_pet) # huge data with 78256 observations and 12 variable
austin_pet$name[[100]]
head(punjab_data2
head(punjab_data2)
head(punjab_data2)
pun_growth(head)
head(pun_growth)
pun_gdp <- punjab_data2 %>%
filter(Description == 'GDP (in Rs. Cr.)')
pun_growth <- punjab_data2 %>%
filter(Description == 'Growth Rate % (YoY)')
head(pun_growth)
pun_growth(head)
head(pun_growth)
getwd()
head(pun_growth)
head(pun_growth)
pun_gdp
missing_by_column <- pun_gdp %>%
is.na %>%
as_data_frame %>%
mutate(row_number = 1:nrow(.)) %>%
gather(variable, is_missing, -row_number)
missing_by_column <- pun_gdp %>%
is.na %>%   # check if each cell is na
as_data_frame %>%  # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% #add a column with the row number
gather(variable, is_missing, -row_number)
library(tidyverse)
library(mice)
set.seed(5)
missing_by_column <- pun_gdp %>%
is.na %>%   # check if each cell is na
as_data_frame %>%  # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% #add a column with the row number
gather(variable, is_missing, -row_number)
missing_by_column <- pun_gdp %>%
is.na %>%   # check if each cell is na
as_tibble() %>%  # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% #add a column with the row number
gather(variable, is_missing, -row_number)
missing_by_column
View(missing_by_column)
tibble?
?tibble()
ggplot(missing_by_column, aes(x = variable, y = row_number,
fill = is_missing)) + geom_tile() + theme_minimal() +
scale_fill_grey(name = "", labels = c("Present", "Missing")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size = 8)) +
labs(x = "Variables in Dataset", y = "Rows/observations")
ggplot(missing_by_column, aes(x = variable, y = row_number,
fill = is_missing)) + geom_tile() + theme_minimal() +
scale_fill_gradient(name = "", labels = c("Present", "Missing")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size = 8)) +
labs(x = "Variables in Dataset", y = "Rows/observations")
ggplot(missing_by_column, aes(x = variable, y = row_number,
fill = is_missing)) + geom_tile() + theme_minimal() +
scale_fill_greyt(name = "", labels = c("Present", "Missing")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size = 8)) +
labs(x = "Variables in Dataset", y = "Rows/observations")
ggplot(missing_by_column, aes(x = variable, y = row_number,
fill = is_missing)) + geom_tile() + theme_minimal() +
scale_fill_grey(name = "", labels = c("Present", "Missing")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size = 8)) +
labs(x = "Variables in Dataset", y = "Rows/observations")
ggplot(missing_by_column, aes(x = variable, y = row_number,
fill = is_missing)) + geom_tile() + theme_minimal() +
scale_fill_grey(name = "", labels = c("Present", "Missing")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size = 8)) +
labs(x = "Variables in Dataset", y = "Rows/observations")
pun_growth
pun_gdp
pun_growth
missin_by_col <- pun_growth %>%
as_tibble() %>%
mutate(row_number = 1:nrow(.)) %>%
missin_by_col <- pun_growth %>%
as_tibble() %>%
mutate(row_number = 1:nrow(.))
missin_by_col <- pun_growth %>%
is.na %>%
as_tibble() %>%
mutate(row_number = 1:nrow(.))
missin_by_col
pun_growth
View(pun_growth)
View(missin_by_col)
missing_by_col <- pun_growth %>%
is.na %>%
as_tibble() %>%
mutate(row_number = 1:nrow(.)) %>%
gather(variable, is_missing, -row_number)
View(missing_by_col)
missing_by_col <- pun_growth %>%
is.na %>%
as_tibble() %>% # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% # add a clumn with the row number
gather(variable, -is_missing, row_number) # Conversion of wide data to narrow
missing_by_col <- pun_growth %>%
is.na %>%
as_tibble() %>% # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% # add a clumn with the row number
gather(variable, is_missing, row_number)
missing_by_col
missing_by_col <- pun_growth %>%
is.na %>%
as_tibble() %>% # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% # add a clumn with the row number
gather(variable, is_missing, row_number) # Conversion of wide data to narrow
missing_by_col
View(missing_by_col)
missing_by_col <- pun_growth %>%
is.na %>%
as_tibble() %>% # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% # add a clumn with the row number
gather(variable, is_missing, -row_number) # Conversion of wide data to narrow
ggplot(missing_by_col, aes(x = variable, y = row_number, fill = is_missing ))
+ geom_tile() + theme_minimal() + scale_fill_grey(name = "", labels =
c("Present", "Missing")) + theme(axis.text.x =  element_text(angle = 45, vjust
= 0.5, size = 8)) + labs(x = "Variables in Dataset", y = "Rows/obs")
missing_by_col
ggplot(missing_by_col, aes(x = variable, y = row_number, fill = is_missing ))
+ geom_tile() + theme_minimal() + scale_fill_grey(name = "", labels =
c("Present", "Missing")) + theme(axis.text.x =  element_text(angle = 45, vjust
= 0.5, size = 8)) + labs(x = "Variables in Dataset", y = "Rows/obs")
missing_by_col <- pun_growth %>%
is.na %>%
as_tibble() %>% # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% # add a clumn with the row number
gather(variable, is_missing, -row_number) # Conversion of wide data to narrow
missin_by_col
missing_by_col <- pun_growth %>%
is.na %>%
as_tibble() %>% # Converstion to data-frame
mutate(row_number = 1:nrow(.)) %>% # add a clumn with the row number
gather(variable, is_missing, -row_number)
missin_by_col
missing_by_col
ggplot(missing_by_column, aes(x = variable, y = row_number,
fill = is_missing)) + geom_tile() + theme_minimal() +
scale_fill_grey(name = "", labels = c("Present", "Missing")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size = 8)) +
labs(x = "Variables in Dataset", y = "Rows/observations")
ggplot(missing_by_col, aes(x = variable, y = row_number, fill = is_missing ))
+ geom_tile() + theme_minimal() + scale_fill_grey(name = "", labels =
c("Present", "Missing")) + theme(axis.text.x =  element_text(angle = 45, vjust
= 0.5, size = 8)) + labs(x = "Variables in Dataset", y = "Rows/obs")
ggplot(missing_by_col, aes(x = variable, y = row_number,
fill = is_missing)) + geom_tile() + theme_minimal() +
scale_fill_grey(name = "", labels = c("Present", "Missing")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size = 8)) +
labs(x = "Variables in Dataset", y = "Rows/observations")
